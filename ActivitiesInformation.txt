##PIDA CLUMETIC GITHUB
 
##http connection
SDK 28 이후부터는 TLS 기반 통신을 권하나 우리는 http 사용
사용하는 도메인 모두 network-security-config에 저장해놓아야 커넥션 가능
 (cf. subdomain들은 필요 없으며, 현재는 http://ec2-13-125-246-38.ap-northeast-2.compute.amazonaws.com/)
 
## Shared preferences
“user” access_token, refresh_token, username, password, userid, gender, age, skintype, concern(소문자 단어), allergy(대문자 단어), payment, delivery (모두 string)
“first” first(bool)
"tester" count(int), first_name(string), first_id(string), second_name, …, third_id 
 
A. 로딩화면
=시작되자마자 로딩이미지 애니메이션 시작
=인터넷이 연결되어있는지 확인. 
=애니메이션을 위해 2초 딜레이 이후, 이미 로그인 되어있는 기기인지 확인
  0) first time이면
-튜토리얼 화면으로 이동
-액티비티 종료
  1) access_token이 저장되어 있는 경우 
-“로그인 되었습니다” toast
-카테고리 화면으로 이동, access_token 넘겨줌
-액티비티 종료
  2) first time이 아니지만 access_token이 없는 경우 
-로그인 화면으로 이동
-액티비티 종료
 
B. 로그인 화면
=회원가입 버튼을 누르면 회원가입 페이지로
=로그인버튼을 누르면 
-editText에서 현재 username과 password의 값 저장
-getAccessToken 실행.
=getAccessToken에서는
-httpUrlConnection에 파라미터로 username, password, grant_type, client_id, client_password 전달   (현재 임의 클라이언트)
-옳게 response가 되었을 때(response code가 200) InputStream을 JSONObject로 변환
1)로그인 성공 시(JSONObject에 access_token 존재시)
-username, password, refresh_token, username 저장
-“로그인 되었습니다” toast
-카테고리 화면으로 이동
-액티비티 종료
2) 실패 시 
-아이디와 비밀번호를 다시 확인해달라는 다이얼로그 띄우기
 
C. 회원가입
=총 3개의 fragment 존재, transaction으로 이동
-시작하자마자 fragment1 실행
=다음 버튼을 누르면 현재 fragment stack count에 따라 다른 함수 실행
1) 이메일, 비밀번호, 비밀번호 확인 
-각 세가지가 모두 유효한지 boolean get
-모두 옳으면 다음 fragment로
-옳지 않으면 현재 프래그먼트에(Greeting1) 무엇때문에 되지 않는지 실행
-만약 이메일이 이미 존재하는 경우 로그인페이지로 돌아갈 거냐는 다이얼로그 실행
2) 성별 나이 
- 선택하지 않은 경우 넘어가지 않도록(fragment에 toast)
- 모두 옳게 선택하면 버튼의 텍스트 '완료'로 변경
3) 피부타입 피부고민 알러지 
- 피부타입이 2열로 존재하여, fragment(Greeting3)에 각 열이 클릭될때마다 다른 열에서 선택 해제하는 리스너(listener1,2) 존재
- 버튼(완료)를 눌렀을 때에 Greeting3의 함수 실행. 
- 하나라도 선택되지 않은 항목이 있으면 선택하라는 toast 후에 data로 null 반환
- 반환된 데이터가 null이 아니면 SignupConnection 실행
=SignupConnection의 결과 각 dialog 띄어준 후 B로그인 액티비티로 이동
	1.	성공 dialog
	2.	실패 dialog
 
D. 튜토리얼
=액티비티에서 count 변수 사용
=버튼을 누르면 현재 카운트에 따라 이미지의 리소스를 다음 이미지로 변경 후 카운트 증가
=count 4인 경우, 버튼 다시 누르면 로그인 화면으로 이동
 
E. 카테고리 (카테고리 리스트)
=크림, 유아용품 버튼을 누르면 버튼별 부여된 숫자(크림:1, 유아용품:5)를 추가한 url로 connect
-해당 카테고리에 존재하는 모든 url string을 array로 저장
-서브카테고리로 인텐트에 카테고리 숫자, url string array, 카테고리 숫자 넣어서 전달
 
F. 서브카테고리 (물품 리스트)
=시작하면서 인텐트로 넘겨받은 정보들 저장, ListConnection 실행
-모든 url에 for문으로 실행
-부여된 숫자에 따라 price(용량별 가격) string 생성
-이름, 회사, 가격, 이미지 url, 제조사 등의 모든 정보를 가진 product라는 오브젝트 생성
-모든 url이 product로 변환되면 showList 실행
=showList
-PagerAdapter 실행
-현재 이미지를 제외한 각 정보들은 전달받아 view에 set하고, 이미지는 url connection
 
G. 튜토리얼 fragments 1,2,3
 
H. 물품 상세 페이지
=F서브카테고리의 intent 정보들을 받아 입력
=이미지의 경우 uri로 띄워주는 asynkTask 실행
=리뷰와 ingredients 또한 list를 만들어주는 asynkTask 각각 실행
 
I. 설정 페이지-정보 수정 및 PATCH
 
J. 설정페이지-공지사항, FAQ
 
K. 설정페이지-앱 버전
 
L. 리스트 액티비티(search)
 
M. 카메라 액티비티(ocr)
 
N. 공동구매 액티비티
 
O. 공동구매 상세페이지
 
Q. 장바구니
 
R. 피다피커-테스터 주문
 
